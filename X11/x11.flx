requires package "x11";
/* 
Some X11 bindings for Felix */
/* X11.fpc:
provides_dlib: -lX11
provides_slib: -lX11
includes: "<X11/Xlib.h>"
includes: "<X11/Xutil.h>"
includes: "<X11/cursorfont.h>"
includes: "<X11/Xatom.h>"
*/
class X11_Xlib {
  open C_hack;
  requires package "x11";

  type display = "Display";

  typedef display_ptr = &display;

  type window_source = "Window *";

  type cursor = "Cursor ";

  typedef cursor_ptr = &cursor;

  type window = "Window";

  typedef window_ptr = &window;

  type gc = "GC";

  type drawable = "Drawable";

  //type xfontset = "XFontSet";

  type xfontstruct = "XFontStruct";

  typedef screen_number = int;

  typedef pixel = ulong;

  typedef time = ulong;

  cstruct XSegment = { x1:short; y1:short; x2:short; y2:short; };

  typedef xsegment = XSegment;

  cstruct XPoint { x:short; y:short; };
 
  typedef xpoint = XPoint;

  cstruct XRectangle = { x:short; y:short; width:ushort; height:ushort; };

  typedef xrectangle = XRectangle;

  cstruct XArc = { x:short; y:short; width:ushort; height:ushort;
                   angle1:short; angle2:short; };

  typedef xarc = XArc;

  gen XOpenDisplay: string -> display_ptr = "XOpenDisplay($1.c_str())";

  gen openDisplay(display_str:string):opt[display_ptr] = {
    var dpy:display_ptr = XOpenDisplay(display_str);
    return if not (C_hack::isNULL(dpy)) then Some dpy else None[display_ptr] endif;
  }

  //interface to the X11 library function XOpenDisplay().

  proc closeDisplay: display_ptr = "XCloseDisplay($1);";

  //interface to the X11 library function XCloseDisplay()

  gen defaultScreen: display_ptr->screen_number = "XDefaultScreen($1)";

  //interface to the X11 library function XDefaultScreen().

  gen blackPixel: display_ptr * screen_number -> pixel =  "XBlackPixel($1,$2)";

  //interface to the X11 library function XBlackPixel().

  gen whitePixel: display_ptr * screen_number -> pixel = "XWhitePixel($1,$2)";
  
  //interface to the X11 library function XWhitePixel().

  gen rootWindow : display_ptr * screen_number ->  window = "XRootWindow($1,$2)";

  gen defaultRootWindow: display_ptr->window = "DefaultRootWindow($1)";

  gen defaultGC: display_ptr*int -> gc = "XDefaultGC($1,$2)";
                    
  gen fillRectangle':display_ptr * window * gc * int * int * uint * uint -> int = "XFillRectangle($1,$2,$3,$4,$5,$6,$7)";
 
  proc fillRectangle:display_ptr * window * gc * int * int * uint * uint = "XFillRectangle($1,$2,$3,$4,$5,$6,$7);";

  proc drawString: display_ptr*window*gc*int*int*string = "XDrawString($1,$2,$3,$4,$5,(_Xconst char*)$6.c_str(),$6.length());";
  gen drawString': display_ptr*window*gc*int*int*string -> int = "XDrawString($1,$2,$3,$4,$5,(_Xconst char*)$6.c_str(),$6.length())";

  fun supportsLocale: ()->bool = "XSupportsLocale()";

  gen displayHeight: display_ptr*screen_number -> int = "(ScreenOfDisplay(dpy,scr)->height)";

  gen displayWidth:display_ptr*screen_number -> int = "(ScreenOfDisplay(dpy,scr)->width)";

  proc ungrabPointer:display_ptr*time = "XUngrabPointer($1,$2);";
  gen ungrabPointer':display_ptr*time -> int = "XUngrabPointer($1,$2)";
    //Display*		/* display */,
    //Time		/* time */

  const GrabSuccess:int;
  const AlreadyGrabbed:int;
  const GrabInvalidTime:int;
  const GrabNotViewable:int;
  const GrabFrozen:int;
  gen grabPointer: display_ptr*window*bool*ulong*int*int*window*cursor_ptr*time -> int = "XGrabPointer($1,$2,$3,$4,$5,$6,$7,$8,$9)";
  gen grabPointer: display_ptr*window*bool*ulong*int*int -> int = "XGrabPointer($1,$2,$3,$4,$5,$6,None,None,CurrentTime)";
    //Display*		/* display */,
    //Window		/* grab_window */,
    //Bool		/* owner_events */,
    //unsigned int	/* event_mask */,
    //int			/* pointer_mode */,
    //int			/* keyboard_mode */,
    //Window		/* confine_to */,
    //Cursor		/* cursor */,
    //Time		/* time */

  const CurrentTime:ulong;
}

class X11_Xlib_Window { 
  open X11_Xlib;
  typedef position = int^2;
  typedef dimension = uint^2;
  typedef depth = int;
  gen createSimpleWindow ( d:display_ptr, w:window, p:position, d1:dimension,
     d2:depth, px1:pixel , px2:pixel): window => createSimpleWindow(d,w,p.0,p.1,d1.0,d1.1,
     d2,px1,px2);
  gen createSimpleWindow: display_ptr *  window * int * int * uint * uint  * depth * pixel * pixel ->  window = "XCreateSimpleWindow($1,$2,$3,$4,$5,$6,$7,$8,$9)";
  //interface to the X11 library function XCreateSimpleWindow().

  proc mapWindow: display_ptr * window = "XMapWindow($1,$2);";
  //interface to the X11 library function XMapWindow().

  type pixmap = "Pixmap";
  type colormap = "Colormap";
  //type cursor = "Cursor";

  cstruct XSetWindowAttributes = {
     background_pixmap: pixmap;	/* background or None or ParentRelative */
     background_pixel: ulong;	/* background pixel */
     border_pixmap: pixmap;	/* border of the window */
     border_pixel: ulong;	/* border pixel value */
     bit_gravity: int;		/* one of bit gravity values */
     win_gravity: int;		/* one of the window gravity values */
     backing_store: int;	/* NotUseful, WhenMapped, Always */
     backing_planes: ulong;/* planes to be preseved if possible */
     backing_pixel: ulong;/* value to use in restoring planes */
     save_under: bool;		/* should bits under be saved? (popups) */
     event_mask: long;		/* set of events that should be saved */
     do_not_propagate_mask: long;	/* set of events that should not propagate */
     override_redirect: bool;	/* boolean value for override-redirect */
     colormap: colormap;		/* color map to be associated with window */
     cursor: cursor;		/* cursor to be displayed (or None) */
  };

  gen XSetWindowAttributesAlloc:()->&XSetWindowAttributes = "(XSetWindowAttributes *)malloc(sizeof(XSetWindowAttributes))";

  type visual = "Visual";
  type screen = "Screen";

  cstruct XWindowAttributes ={
     x:int; y:int;			/* location of window */
    width:int; height:int;		/* width and height of window */
    border_width:int;		/* border width of window */
    depth:int;          	/* depth of window */
    visual:&visual;		/* the associated visual structure */
    root:window;        	/* root of screen containing window */
     c_class:int;		/* C++ InputOutput, InputOnly*/
     bit_gravity:int;		/* one of bit gravity values */
     win_gravity:int;		/* one of the window gravity values */
     backing_store:int;		/* NotUseful, WhenMapped, Always */
     backing_planes:ulong;/* planes to be preserved if possible */
     backing_pixel:ulong;/* value to be used when restoring planes */
     save_under:bool;		/* boolean, should bits under be saved? */
     colormap:colormap;		/* color map to be associated with window */
     map_installed:bool;		/* boolean, is color map currently installed*/
     map_state:int;		/* IsUnmapped, IsUnviewable, IsViewable */
     all_event_masks:long;	/* set of events all people have interest in*/
     your_event_mask:long;	/* my event mask */
     do_not_propagate_mask:long; /* set of events that should not propagate */
     override_redirect:bool;	/* boolean value for override-redirect */
     screen:&screen;		/* back pointer to correct screen */
};

  gen XWindowAttributesAlloc:()->&XWindowAttributes = "(XWindowAttributes *)malloc(sizeof(XWindowAttributes))";
  typedef xwindowattributes = XWindowAttributes;
  typedef xsetwindowattributes = XSetWindowAttributes;
  typedef status = int;

  gen getWindowAttributes (dpy:display_ptr,w:window):opt[XWindowAttributes] = {
    var attr:XWindowAttributes;// = XWindowAttributesAlloc();
    return if XGetWindowAttributes(dpy,w,&attr) != 0 then Some attr else None[XWindowAttributes] endif;
  }
  gen XGetWindowAttributes: display_ptr*window*&XWindowAttributes -> status = "XGetWindowAttributes($1,$2,$3)";

  proc moveResizeWindow:display_ptr*window*int*int*uint*uint="XMoveResizeWindow($1,$2,$3,$4,$5,$6);";
  gen moveResizeWindow':display_ptr*window*int*int*uint*uint->int ="XMoveResizeWindow($1,$2,$3,$4,$5,$6)";

    //Display*		/* display */,
    //Window		/* w */,
    //int			/* x */,
    //int			/* y */,
    //unsigned int	/* width */,
    //unsigned int	/* height */

  
  proc raiseWindow:display_ptr*window = "XRaiseWindow($1,$2);";
  gen raiseWindow':display_ptr*window->int = "XRaiseWindow($1,$2)";
  //Display*		/* display */,
    //Window		/* w */
  
  fun isNone:window->bool = "($1 == None)";
}

class X11_Xlib_Misc {
  open X11_Xlib;
  open X11_Xlib_Window;
  typedef atom = ulong;
  const XA_WM_NAME:atom;

  header """
    XTextProperty * XTextPropertyHelper(const char * text,unsigned long len ) {
      XTextProperty * xtp = (XTextProperty *) malloc(sizeof(XTextProperty));
      xtp->value = (unsigned char *)text;
      xtp->encoding = XA_STRING;
      xtp->format = 8;
      xtp->nitems = len;
      return xtp;
    }

  """; 
  proc setTextProperty: display_ptr * window * string * atom = "XSetTextProperty($1,$2,XTextPropertyHelper($3.c_str(),(unsigned long)$3.length()),$4);";
  
  const X_SetInputFocus:int;  
  gen internAtom:display_ptr*string*bool->atom = "XInternAtom($1,$2.c_str(),$3)";

  // Cursor stuff
  const XC_num_glyphs:uint;
  const XC_X_cursor:uint;
  const XC_arrow:uint;
  const XC_based_arrow_down:uint;
  const XC_based_arrow_up:uint;
  const XC_boat:uint;
  const XC_bogosity:uint;
  const XC_bottom_left_corner:uint;
  const XC_bottom_right_corner:uint;
  const XC_bottom_side:uint;
  const XC_bottom_tee:uint;
  const XC_box_spiral:uint;
  const XC_center_ptr:uint;
  const XC_circle:uint;
  const XC_clock:uint;
  const XC_coffee_mug:uint;
  const XC_cross:uint;
  const XC_cross_reverse:uint;
  const XC_crosshair:uint;
  const XC_diamond_cross:uint;
  const XC_dot:uint;
  const XC_dotbox:uint;
  const XC_double_arrow:uint;
  const XC_draft_large:uint;
  const XC_draft_small:uint;
  const XC_draped_box:uint;
  const XC_exchange:uint;
  const XC_fleur:uint;
  const XC_gobbler:uint;
  const XC_gumby:uint;
  const XC_hand1:uint;
  const XC_hand2:uint;
  const XC_heart:uint;
  const XC_icon:uint;
  const XC_iron_cross:uint;
  const XC_left_ptr:uint;
  const XC_left_side:uint;
  const XC_left_tee:uint;
  const XC_leftbutton:uint;
  const XC_ll_angle:uint;
  const XC_lr_angle:uint;
  const XC_man:uint;
  const XC_middlebutton:uint;
  const XC_mouse:uint;
  const XC_pencil:uint;
  const XC_pirate:uint;
  const XC_plus:uint;
  const XC_question_arrow:uint;
  const XC_right_ptr:uint;
  const XC_right_side:uint;
  const XC_right_tee:uint;
  const XC_rightbutton:uint;
  const XC_rtl_logo:uint;
  const XC_sailboat:uint;
  const XC_sb_down_arrow:uint;
  const XC_sb_h_double_arrow:uint;
  const XC_sb_left_arrow:uint;
  const XC_sb_right_arrow:uint;
  const XC_sb_up_arrow:uint;
  const XC_sb_v_double_arrow:uint;
  const XC_shuttle:uint;
  const XC_sizing:uint;
  const XC_spider:uint;
  const XC_spraycan:uint;
  const XC_star:uint;
  const XC_target:uint;
  const XC_tcross:uint;
  const XC_top_left_arrow:uint;
  const XC_top_left_corner:uint;
  const XC_top_right_corner:uint;
  const XC_top_side:uint;
  const XC_top_tee:uint;
  const XC_trek:uint;
  const XC_ul_angle:uint;
  const XC_umbrella:uint;
  const XC_ur_angle:uint;
  const XC_watch:uint;
  const XC_xterm:uint;
  
  

  gen createFontCursor:display_ptr*uint->cursor = "(Cursor)XCreateFontCursor($1,$2)";
//    Display*		/* display */,
//    unsigned int	/* shape */

proc defineCursor:display_ptr*window*cursor = "XDefineCursor($1, $2, $3);";
/*XDefineCursor(display, w, cursor)
      Display *display;
      Window w;
      Cursor cursor;
*/


}

class X11_Xlib_Event {
  open X11_Xlib;
  open X11_Xlib_Misc; 
  open X11_Xlib_Window;
  proc sync: display_ptr*bool = "XSync($1, $2);";
  type xevent = "XEvent *";
  const KeyPress: int;
  const Expose: int;
/*
  cstruct XKeyEvent = {
	type: int;		/* of event */
	serial: ulong ;	/* # of last request processed by server */
	send_event: bool;	/* true if this came from a SendEvent request */
	display: display_ptr;	/* Display the event was read from */
	window: window;	        /* "event" window it is reported relative to */
	root: window;	        /* root window that the event occurred on */
	subwindow: window;	/* child window */
	time: time;		/* milliseconds */
	x: int;
        y: int;		        /* pointer x, y coordinates in event window */
	x_root: int; 
        y_root: int;	/* coordinates relative to root */
	state: uint;	/* key or button mask */
	keycode: uint;	/* detail */
	same_screen: bool;	/* same screen flag */
   }; 
*/  
  typedef xkeyevent = XKeyEvent;
 
  proc nextEvent: display_ptr*xevent = "XNextEvent($1,$2);";

  header """
  int XEventTypeHelper(XEvent * e) { if (e != NULL) {return e->type;}else{return 0;} }
  """;

  gen getEventType: xevent -> int = "XEventTypeHelper($1)";

  const NoEventMask: ulong;
  const KeyReleaseMask: ulong;
  const ButtonPressMask: ulong;
  const ButtonReleaseMask: ulong;
  const EnterWindowMask: ulong;
  const LeaveWindowMask: ulong;
  const PointerMotionMask: ulong;
  const PointerMotionHintMask: ulong;
  const Button1MotionMask: ulong;
  const Button2MotionMask: ulong;
  const Button3MotionMask: ulong;
  const Button4MotionMask: ulong;
  const Button5MotionMask: ulong;
  const ButtonMotionMask: ulong;
  const KeymapStateMask: ulong;
  const VisibilityChangeMask: ulong;
  const StructureNotifyMask: ulong;
  const ResizeRedirectMask: ulong;
  const SubstructureNotifyMask: ulong;
  const SubstructureRedirectMask: ulong;
  const FocusChangeMask: ulong;
  const PropertyChangeMask: ulong;
  const ColormapChangeMask: ulong;
  const OwnerGrabButtonMask: ulong;
  const ExposureMask: ulong;
  const KeyPressMask: ulong;

  //const None: ulong;
  val XNone = 0L;
  proc selectInput:display_ptr*window*ulong = "XSelectInput($1,$2,$3);";
  gen xevent_buff:()->xevent = "(XEvent *)malloc(1024)";

  type xerrorhandler = "XErrorHandler";
  proc  setErrorHandler: xerrorhandler = "XSetErrorHandler($1)";
  //grabKey of     &display * uchar * uint * window * bool * int * int
  proc grabKey: display_ptr*uchar*uint*window*bool*int*int = "XGrabKey($1,$2,$3,$4,$5,$6,$7);";
  gen grabKey': display_ptr*uchar*uint*window*bool*int*int->int = "XGrabKey($1,$2,$3,$4,$5,$6,$7)";
    //Display*          /* display */,
    //int               /* keycode */,
    //unsigned int      /* modifiers */,
    //Window            /* grab_window */,
    //Bool              /* owner_events */,
    //int               /* pointer_mode */,
    //int               /* keyboard_mode */

  typedef keycode = uchar;

  typedef xid = ulong;
  type keysym = "KeySym";
  typedef XID = uint; 
  gen keysymToKeycode: display_ptr*keysym->keycode = "XKeysymToKeycode($1,$2)";
  //KeyCode XKeysymToKeycode(
  //  Display*		/* display */,
  //  KeySym		/* keysym */
  //);

  gen keysymToString: keysym->string = "std::string(XKeysymToString($1))";
  gen stringToKeysym: string->keysym = "XStringToKeysym($1.c_str())";

  const ShiftMask:uint;
  const LockMask:uint;
  const ControlMask:uint;
  const Mod1Mask:uint;
  const Mod2Mask:uint;
  const Mod3Mask:uint;
  const Mod4Mask:uint;
  const Mod5Mask:uint;

  const GrabModeSync:int;
  const GrabModeAsync:int;
/*
  const NoEventMask:int;
  const KeyPressMask:int;
  const KeyReleaseMask:int;
  const ButtonPressMask:int;
  const ButtonReleaseMask:int;
  const EnterWindowMask:int;
  const LeaveWindowMask:int;
  const PointerMotionMask:int;
  const PointerMotionHintMask:int;
  const Button1MotionMask:int;
  const Button2MotionMask:int;
  const Button3MotionMask:int;
  const Button4MotionMask:int;
  const Button5MotionMask:int;
  const ButtonMotionMask:int;
  const KeymapStateMask:int;
  const ExposureMask:int;
  const VisibilityChangeMask:int;
  const StructureNotifyMask:int;
  const ResizeRedirectMask:int;
  const SubstructureNotifyMask:int;
  const SubstructureRedirectMask:int;
  const FocusChangeMask:int;
  const PropertyChangeMask:int;
  const ColormapChangeMask:int;
  const OwnerGrabButtonMask:int;
*/
  //XGrabButton of &display *uint*uint*window* bool* ulong * int * int * long * long
  proc grabButton: display_ptr*uint*uint*window*bool*ulong*int*int*window*cursor =  "XGrabButton($1,$2,$3,$4,$5,$6,$7,$8,$9,$10);";
  //gen grabButton: display_ptr*uint*uint*window*bool*ulong*int*int*window*cursor->int =  "XGrabButton($1,$2,$3,$4,$5,$6,$7,$8,$9,$10);";
                   //&display*uint*uint*window*bool*ulong*int*int
  proc grabButton: display_ptr*uint*uint*window*bool*ulong*int*int =  "XGrabButton($1,$2,$3,$4,$5,$6,$7,$8,None,None);";
  gen grabButton': display_ptr*uint*uint*window*bool*ulong*int*int->int =  "XGrabButton($1,$2,$3,$4,$5,$6,$7,$8,None,None);";
    //Display*		/* display */,
    //unsigned int	/* button */,
    //unsigned int	/* modifiers */,
    //Window		/* grab_window */,
    //Bool		/* owner_events */,
    //unsigned int	/* event_mask */,
    //int			/* pointer_mode */,
    //int			/* keyboard_mode */,
    //Window		/* confine_to */,
    //Cursor		/* cursor */


cstruct XKeyEvent = {
	type:int;		/* of event */
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;	        /* "event" window it is reported relative to */
	root:window;	        /* root window that the event occurred on */
	subwindow:window;	/* child window */
	time:time;		/* milliseconds */
	x:int; y:int;		/* pointer x, y coordinates in event window */
	x_root:int; y_root:int;	/* coordinates relative to root */
	state:uint;	/* key or button mask */
	keycode:uint;	/* detail */
	same_screen:bool;	/* same screen flag */
};
typedef XKeyPressedEvent = XKeyEvent;
typedef XKeyReleasedEvent = XKeyEvent;

cstruct XButtonEvent = {
	type:int;		/* of event */
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;	        /* "event" window it is reported relative to */
	root:window;	        /* root window that the event occurred on */
	subwindow:window;	/* child window */
	time:time;		/* milliseconds */
	x:int; y:int;		/* pointer x, y coordinates in event window */
	x_root:int; y_root:int;	/* coordinates relative to root */
	state:uint;	/* key or button mask */
	button:uint;	/* detail */
	same_screen:bool;	/* same screen flag */
};
typedef XButtonPressedEvent = XButtonEvent ;
typedef XButtonReleasedEvent = XButtonEvent ;

cstruct XMotionEvent = {
	type:int;		/* of event */
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;	        /* "event" window reported relative to */
	root:window;	        /* root window that the event occurred on */
	subwindow:window;	/* child window */
	time:time;		/* milliseconds */
	x:int; y:int;		/* pointer x, y coordinates in event window */
	x_root:int; y_root:int;	/* coordinates relative to root */
	state:uint;	/* key or button mask */
	is_hint:char;		/* detail */
	same_screen:bool;	/* same screen flag */
};
typedef XPointerMovedEvent = XMotionEvent ;

cstruct  XCrossingEvent {
	type:int;		/* of event */
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;	        /* "event" window reported relative to */
	root:window;	        /* root window that the event occurred on */
	subwindow:window;	/* child window */
	time:time;		/* milliseconds */
	x:int; y:int;		/* pointer x, y coordinates in event window */
	x_root:int; y_root:int;	/* coordinates relative to root */
	mode:int;		/* NotifyNormal, NotifyGrab, NotifyUngrab */
	detail:int;
	/*
	 * NotifyAncestor, NotifyVirtual, NotifyInferior,
	 * NotifyNonlinear,NotifyNonlinearVirtual
	 */
	same_screen:bool;	/* same screen flag */
	focus:bool;		/* boolean focus */
	state:uint;	/* key or button mask */
};
typedef XEnterWindowEvent = XCrossingEvent ;
typedef XLeaveWindowEvent = XCrossingEvent ;

 cstruct XFocusChangeEvent = {
	type:int;		/* FocusIn or FocusOut */
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;		/* window of event */
	mode:int;		/* NotifyNormal, NotifyWhileGrabbed,
				   NotifyGrab, NotifyUngrab */
	detail:int;
	/*
	 * NotifyAncestor, NotifyVirtual, NotifyInferior,
	 * NotifyNonlinear,NotifyNonlinearVirtual, NotifyPointer,
	 * NotifyPointerRoot, NotifyDetailNone
	 */
};
typedef XFocusInEvent = XFocusChangeEvent ;
typedef XFocusOutEvent = XFocusChangeEvent ;

/* generated on EnterWindow and FocusIn  when KeyMapState selected */
 cstruct  XKeymapEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	key_vector:+char; //char key_vector[32];
};

 cstruct XExposeEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	x:int; y:int;
	width:int; height:int;
	count:int;		/* if non-zero, at least this many more */
} ;

 cstruct XGraphicsExposeEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	drawable:drawable;
	x:int; y:int;
	width:int; height:int;
	count:int;		/* if non-zero, at least this many more */
	major_code:int;		/* core is CopyArea or CopyPlane */
	minor_code:int;		/* not defined in the core */
} ;

 cstruct XNoExposeEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	drawable:drawable ;
	major_code:int;		/* core is CopyArea or CopyPlane */
	minor_code:int;		/* not defined in the core */
} ;

 cstruct XVisibilityEvent =  {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	state:int;		/* Visibility state */
};

 cstruct XCreateWindowEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	parent:window;		/* parent of the window */
	window:window;		/* window id of window created */
	x:int; y:int;		/* window location */
	width:int; height:int;	/* size of window */
	border_width:int;	/* border width */
	override_redirect:bool;	/* creation should be overridden */
} ;

 cstruct XDestroyWindowEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
} ;

 cstruct XUnmapEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	from_configure:bool;
} ;

 cstruct  XMapEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	override_redirect:bool;	/* boolean, is override set... */
};

 cstruct XMapRequestEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	parent:window;
	window:window;
} ;

 cstruct  XReparentEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	parent:window;
	x:int; y:int;
	override_redirect:bool;
};

 cstruct  XConfigureEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	x:int; y:int;
	width:int; height:int;
	border_width:int;
	above:window;
	override_redirect:bool;
};

 cstruct XGravityEvent {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	x:int; y:int;
};

 cstruct  XResizeRequestEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	width:int; height:int;
};

 cstruct  XConfigureRequestEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	parent:window;
	window:window;
	x:int; y:int;
	width:int; height:int;
	border_width:int;
	above:window;
	detail:int;		/* Above, Below, TopIf, BottomIf, Opposite */
	value_mask:ulong;
};

 cstruct  XCirculateEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	event:window;
	window:window;
	place:int;		/* PlaceOnTop, PlaceOnBottom */
};

 cstruct  XCirculateRequestEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	parent:window;
	window:window;
	place:int;		/* PlaceOnTop, PlaceOnBottom */
};

 cstruct  XPropertyEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	atom:atom;
	time:time;
	state:int;		/* NewValue, Deleted */
};

 cstruct  XSelectionClearEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	selection:atom;
	time:time;
};

 cstruct  XSelectionRequestEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	owner:window;
	requestor:window;
	selection:atom;
	target:atom;
	property:atom;
	time:time;
};

cstruct  XSelectionEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	requestor:window;
	selection:atom;
	target:atom;
	property:atom;		/* ATOM or None */
	time:time;
};

cstruct  XColormapEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	colormap:colormap;	/* COLORMAP or None */
	c_new:bool;		/* C++ */
	state:int;		/* ColormapInstalled, ColormapUninstalled */
};

/*cstruct {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;
	message_type:atom ;
	format:int;
	union {
		char b[20];
		short s[10];
		long l[5];
		} data;
} XClientMessageEvent;*/

cstruct  XMappingEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;	/* Display the event was read from */
	window:window;		/* unused */
	request:int;		/* one of MappingModifier, MappingKeyboard,
				   MappingPointer */
	first_keycode:int;	/* first keycode */
	count:int;		/* defines range of change w. first_keycode*/
};

cstruct  XErrorEvent = {
	type:int;
	display:display_ptr;	/* Display the event was read from */
	resourceid:XID ;		/* resource id */
	serial:ulong;	/* serial number of failed request */
	error_code:uchar;	/* error code of failed request */
	request_code:uchar;	/* Major op-code of failed request */
	minor_code:uchar;	/* Minor op-code of failed request */
};

cstruct  XAnyEvent = {
	type:int;
	serial:ulong;	/* # of last request processed by server */
	send_event:bool;	/* true if this came from a SendEvent request */
	display:display_ptr;/* Display the event was read from */
	window:window;	/* window on which event was requested in event mask */
};


/***************************************************************
 *
 * GenericEvent.  This event is the standard event for all newer extensions.
 */

cstruct XGenericEvent =
    {
    type:int;         /* of event. Always GenericEvent */
    serial:ulong;       /* # of last request processed */
    send_event:bool;   /* true if from SendEvent request */
    display:display_ptr;     /* Display the event was read from */
    extension:int;    /* major opcode of extension that caused the event */
    evtype:int;       /* actual event type. */
    } ;

cstruct XGenericEventCookie = {
    type:int;         /* of event. Always GenericEvent */
    serial:ulong;       /* # of last request processed */
    send_event:bool;   /* true if from SendEvent request */
    display:display_ptr;     /* Display the event was read from */
    extension:int;    /* major opcode of extension that caused the event */
    evtype:int;       /* actual event type. */
    cookie:uint;
    //void           *data;
} ;

gen getXKeyEvent: xevent ->XKeyEvent = "$1->xkey";
gen getXButtonEvent: xevent -> XButtonEvent = "($1->xbutton)"; 
gen getXMotionEvent: xevent -> XMotionEvent = "$1->xmotion";
gen getXCrossingEvent: xevent ->  XCrossingEvent = "$1->xcrossing";
gen getXFocusChangeEvent: xevent -> XFocusChangeEvent = "$1->xfocus";
gen getXKeymapEvent: xevent -> XKeymapEvent = "$1->xkeymap";
gen getXExposeEvent: xevent -> XExposeEvent = "$1->xexpose";
gen getXGraphicsExposeEvent: xevent -> XGraphicsExposeEvent = "$1->xgraphicsexpose"; 
gen getXNoExposeEvent: xevent -> XNoExposeEvent = "$1->xnoexpose";
gen getXVisibilityEvent: xevent -> XVisibilityEvent = "$1->xvisibility";
gen getXCreateWindowEvent: xevent -> XCreateWindowEvent = "$1->xcreatewindow";
gen getXDestroyWindowEvent: xevent -> XDestroyWindowEvent = "$1->xdestroywindow";
gen getXUnmapEvent: xevent -> XUnmapEvent = "$1->xunmap";
gen getXMapEvent: xevent -> XMapEvent = "$1->xmap";
gen getXMapRequestEvent: xevent -> XMapRequestEvent = "$1->xmaprequest"; 
gen getXReparentEvent: xevent -> XReparentEvent = "$1->xreparent";
gen getXConfigureEvent: xevent -> XConfigureEvent = "$1->xconfigure";
gen getXResizeRequestEvent: xevent ->  XResizeRequestEvent = "$1->xresize"; 
gen getXConfigureRequestEvent: xevent -> XConfigureRequestEvent = "$1->xconfigurerequest";
gen getXCirculateEvent: xevent ->  XCirculateEvent = "$1->xcirculate";
gen getXCirculateRequestEvent: xevent -> XCirculateRequestEvent = "$1->xcirculterequest";
gen getXPropertyEvent: xevent ->  XPropertyEvent = "$1->xproperty";
gen getXSelectionClearEvent: xevent -> XSelectionClearEvent = "$1->xselectionclear"; 
gen getXSelectionRequestEvent: xevent -> XSelectionRequestEvent = "$1->xselectionrequest";
gen getXSelectionEvent: xevent -> XSelectionEvent = "$1->xselection";
gen getXColormapEvent: xevent -> XColormapEvent = "$1->xcolormap";
gen getXMappingEvent: xevent -> XMappingEvent = "$1->xmapping";
gen getXErrorEvent: xevent -> XErrorEvent = "$1->xerror";
gen getXAnyEvent: xevent -> XAnyEvent = "$1->xany";
gen getXGenericEvent: xevent -> XGenericEvent = "$1->xgeneric";
gen getXGenericEventCookie: xevent -> XGenericEventCookie = "$1->xcookie"; 

gen checkTypedEvent: display_ptr*int*xevent -> bool = "XCheckTypedEvent($1,$2,$3)";

/*
 * this union is defined so Xlib can always use the same sized
 * event structure internally, to avoid memory fragmentation.
 
typedef union _XEvent {
        type:int;		// must not be changed; first element 
	XAnyEvent xany;
	XKeyEvent xkey;
	XButtonEvent xbutton;
	XMotionEvent xmotion;
	XCrossingEvent xcrossing;
	XFocusChangeEvent xfocus;
	XExposeEvent xexpose;
	XGraphicsExposeEvent xgraphicsexpose;
	XNoExposeEvent xnoexpose;
	XVisibilityEvent xvisibility;
	XCreateWindowEvent xcreatewindow;
	XDestroyWindowEvent xdestroywindow;
	XUnmapEvent xunmap;
	XMapEvent xmap;
	XMapRequestEvent xmaprequest;
	XReparentEvent xreparent;
	XConfigureEvent xconfigure;
	XGravityEvent xgravity;
	XResizeRequestEvent xresizerequest;
	XConfigureRequestEvent xconfigurerequest;
	XCirculateEvent xcirculate;
	XCirculateRequestEvent xcirculaterequest;
	XPropertyEvent xproperty;
	XSelectionClearEvent xselectionclear;
	XSelectionRequestEvent xselectionrequest;
	XSelectionEvent xselection;
	XColormapEvent xcolormap;
	XClientMessageEvent xclient;
	XMappingEvent xmapping;
	XErrorEvent xerror;
	XKeymapEvent xkeymap;
	XGenericEvent xgeneric;
	XGenericEventCookie xcookie;
	long pad[24];
} XEvent;
*/


const KeyRelease:int;
const ButtonPress:int;
const ButtonRelease:int;
const MotionNotify:int;
const EnterNotify:int;
const LeaveNotify:int;
const FocusIn:int;
const FocusOut:int;
const KeymapNotify:int;
const GraphicsExpose:int;
const NoExpose:int;
const VisibilityNotify:int;
const CreateNotify:int;
const DestroyNotify:int;
const UnmapNotify:int;
const MapNotify:int;
const MapRequest:int;
const ReparentNotify:int;
const ConfigureNotify:int;
const ConfigureRequest:int;
const GravityNotify:int;
const ResizeRequest:int;
const CirculateNotify:int;
const CirculateRequest:int;
const PropertyNotify:int;
const SelectionClear:int;
const SelectionRequest:int;
const SelectionNotify:int;
const ColormapNotify:int;
const ClientMessage:int;
const MappingNotify:int;
const GenericEvent:int;
const LASTEvent:int;

}
//XCreateFontSet(
//    Display*		/* display */,
//    _Xconst char*	/* base_font_name_list */,
//    char***		/* missing_charset_list */,
//    int*		/* missing_charset_count */,
//    char**		/* def_string */
class X11_Xlib_Font {
  open X11_Xlib;
  open X11_Xlib_Misc;
  type xextdata = "XExtData";
  typedef xextdata_ptr = &xextdata;
  type font = "Font";

  cstruct XFontProp = {name:atom;card32:ulong;};
  typedef xfontprop = XFontProp;
  typedef xfontprop_ptr = &XFontProp;

  cstruct XCharStruct = {
    	lbearing:short;	/* origin to left edge of raster */
    	rbearing:short;	/* origin to right edge of raster */
    	width:short;		/* advance to next char's origin */
    	ascent:short;		/* baseline to top edge of raster */
    	descent:short;	/* baseline to bottom edge of raster */
        attributes:ushort;	/* per char flags (not predefined) */
  };
  typedef xcharstruct = XCharStruct;
  typedef xcharstruct_ptr = &XCharStruct;
  cstruct XFontStruct = {
    ext_data:xextdata_ptr;	/* hook for extension to hang data */
    fid:font;            /* Font id for this font */
    direction:uint;	/* hint about direction the font is painted */
    min_char_or_byte2:uint;/* first character */
    max_char_or_byte2:uint;/* last character */
    min_byte1:uint;	/* first row that exists */
    max_byte1:uint;	/* last row that exists */
    all_chars_exist:bool;/* flag if all characters have non-zero size*/
    default_char:uint;	/* char to print for undefined character */
    n_properties:int;   /* how many properties there are */
    properties:xfontprop_ptr;	/* pointer to array of additional properties*/
    min_bounds:xcharstruct;	/* minimum bounds over all existing char*/
    max_bounds:xcharstruct;	/* maximum bounds over all existing char*/
    per_char:xcharstruct_ptr;	/* first_char to last_char information */
    ascent:int;		/* log. extent above baseline for spacing */
    descent:int;	/* log. descent below baseline for spacing */
  };
  typedef xfontstruct = XFontStruct;
  typedef xfontstruct_ptr = &XFontStruct;
  type xfontset = "XFontSet";
  //  XCreateFontSet of &display * carray[char] * &carray[carray[char]] * &int * carray[char]
  header """
   XFontSet XCreateFontSetDbg(
    Display*	d	/* display */,
    _Xconst char* b	/* base_font_name_list */,
    char***	m	/* missing_charset_list */,
    int*	i	/* missing_charset_count */,
    char**	s	/* def_string */) {
  
    XFontSet xfs= XCreateFontSet(d,b,m,i,s);
    //if(!xfs) { printf("XFS BADDDDDD:%d",10); }
    //if(m) {
        //int c = *i;
	//while(c--)
	//	printf( "dwm: missing fontset: %d%c",c,10);
	//XFreeStringList(*m);
    //}
    //printf("base:%s",b);
    return xfs;
   }
   """;

   gen XCreateFontSet:display_ptr*carray[char]*&carray[+char]*&int*&carray[char] -> xfontset = "XCreateFontSet($1, $2, $3,$4,$5)";


   fun isValidFontSet:xfontset->bool = "!($1 == 0)";

   gen createFontSet (dpy:display_ptr,base_font_name_list:string):opt[xfontset*string*list[string]] = {
     var missing_charset_list:carray[+char];// = array_alloc[+char](d3); 
     var missing_charset_count = 0;
     var def_string_return:+char;
     var missing_fonts = Empty[string];
     var xfs = XCreateFontSet(dpy, cstr(base_font_name_list), &missing_charset_list, 
                 &missing_charset_count, &def_string_return);
     if isValidFontSet(xfs) do
       //for var i in 0 upto missing_charset_count do
       //  missing_fonts = Cons(string(get(missing_charset_list,i)),missing_fonts);
       //done
     done
     return if isValidFontSet(xfs) then
       Some (xfs,string(def_string_return),missing_fonts)
     else 
      None[xfontset*string*list[string]]
     endif;
  }

  //       void XFreeFontSet(Display *display, XFontSet font_set);

  cstruct XFontSetExtents = {
    max_ink_extent:xrectangle;
    max_logical_extent:xrectangle;
  } ;
 
  typedef xfontsetextents = XFontSetExtents;
  typedef xfontsetextents_ptr = &xfontsetextents;

  gen extentsOfFontSet:xfontset -> xfontsetextents_ptr ="XExtentsOfFontSet($1)";

  gen loadQueryFont:display_ptr*string -> xfontstruct_ptr = "XLoadQueryFont($1,$2.c_str())";

  fun isValidFontStructPtr:xfontstruct_ptr->bool = "!($1 == 0)";
//    Display*		/* display */,
//    _Xconst char*	/* name */

  gen queryFont:display*font -> xfontstruct_ptr = "XQueryFont($1,$2)";
//    Display*		/* display */,
//    XID			/* font_ID */
//xfontset * &carray[XFontStruct] * &carray[&carray[char]]
  gen fontsOfFontSet:xfontset*&carray[xfontstruct_ptr]*&carray[carray[char]] -> int = "XFontsOfFontSet($1,$2,$3)";
//    XFontSet		/* font_set */,
//    XFontStruct***	/* font_struct_list */,
//    char***		/* font_name_list */


}
