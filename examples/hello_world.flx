include "X11/x11";
open X11_Xlib;
open X11_Xlib_Window;
open X11_Xlib_Misc;
open X11_Xlib_Event;

val disp =  match openDisplay("") with 
    |Some ?scr => scr 
    |_ => (fail("Unable to open display"); C_hack::null[display]) 
endmatch;
val dflt = defaultScreen(disp);
val border = blackPixel(disp, dflt);
val background = whitePixel(disp,dflt);
val rootw = rootWindow(disp,dflt);
val csr:cursor = createFontCursor(disp,XC_boat);
defineCursor(disp,rootw,csr);
val win =  createSimpleWindow (disp,rootw, (20,20), (300ui,100ui), 10, border, background);
val e:xevent = xevent_buff();
setTextProperty(disp,win, "[Hello World]", XA_WM_NAME);
selectInput(disp,win,bor(KeyPressMask,ExposureMask));
mapWindow(disp,win);
sync(disp, false); 
while true do
  nextEvent(disp,e);
  match getEventType(e) with
  | $(Expose) =>  {
    fillRectangle(disp, win, defaultGC(disp, dflt), 20, 20, 10ui, 10ui);
    drawString(disp, win, defaultGC(disp, dflt), 10, 50, "Hello World!!");
    drawString(disp, win, defaultGC(disp, dflt), 40, 70, "Press any key to exit");
    }
  | _ => {}
  endmatch;
  if getEventType(e) == KeyPress do
    goto quit;
  done
done
quit:>

closeDisplay(disp);
